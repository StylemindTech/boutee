---
import Navbar from "../components/common/Navbar.astro";
import Footer from "../components/common/Footer.astro";
import "aos/dist/aos.css";
import "../styles/global.css";
import "../styles/ourJewellers.css";
import "../styles/forJewellers.css";

const { title = "Astro Site" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/Logo.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/src/styles/global.css" />
    <link rel="stylesheet" href="/src/styles/ourJewellers.css" />
    <link rel="stylesheet" href="/src/styles/forJewellers.css" />

    <title>{title}</title>
  </head>
  <body class="min-h-screen flex flex-col scroll-smooth">
    <!-- header -->
    <Navbar />

    <!-- Page Content -->
    <main class="flex-1">
      <slot />
    </main>

    <!-- footer -->
    <Footer />

    <script>
      import AOS from "aos";
      AOS.init({
        duration: 500, // animation duration
        once: false,
      });
    </script>
  </body>
</html>

<script>
// btn icons spin animation
const buttons = document.querySelectorAll(".spinBtn");

  buttons.forEach((btn) => {
    const icon = btn.querySelector(".btnIcon");
    btn.addEventListener("click", () => {
      icon.classList.remove("animate-spin-once");
      void icon.offsetWidth; // reflow force
      icon.classList.add("animate-spin-once");
    });
  });



  // Floating Parallax -- for Hero Section
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    document.querySelectorAll(".floating").forEach((el) => {
      const speed = parseFloat(el.dataset.speed) || 0.3;
      const offset = scrollY * speed * -0.4; // adjust multiplier for intensity
      el.style.setProperty("--parallaxY", `${offset}px`);
    });
  });

  // Intersection Observer home and tech page animations
const target = document.querySelector(".wrapper");

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      target.classList.add("animate");   // animate  visible
    } else {
      target.classList.remove("animate"); // remove visible
    }
  });
}, { threshold: 0.3 });

observer.observe(target);
</script>
