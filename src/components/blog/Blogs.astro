---
import { Image } from "astro:assets";
import badge from "../../assets/icons/Badge-blog.svg";
import { urlForImage } from "../../sanity/lib/url-for-image";
import { loadQuery } from "../../sanity/lib/load-query";
import type { SanityDocument } from "@sanity/client";

// Fetch all posts
const { data: posts } = await loadQuery<SanityDocument[]>({
  query: `*[_type == "post"] | order(publishedAt desc) {
    title,
    slug,
    publishedAt,
    description,
    body, 
    categories[]->{title,slug},
    mainImage{
      asset->{url},
      alt
    }
  }`,
});

// Fetch all categories
const { data: categories } = await loadQuery<SanityDocument[]>({
  query: `*[_type == "category"] | order(title asc) {
    _id,
    title,
    description,
    slug
  }`,
});

function formatDate(dateString: string) {
  return new Intl.DateTimeFormat("en-GB", {
    day: "2-digit",
    month: "short",
    year: "numeric",
  }).format(new Date(dateString));
}

function calculateReadTime(body: any[]): string {
  if (!body || body.length === 0) return "1 min read";

  const text = body
    .filter((block) => block._type === "block" && block.children)
    .map((block) => block.children.map((child) => child.text).join(" "))
    .join(" ");

  const words = text.trim().split(/\s+/).length;
  const wordsPerMinute = 200;
  const minutes = Math.ceil(words / wordsPerMinute);

  return `${minutes} min read`;
}
---

<section class="lg:py-[112px] py-[48px]">
  <div class="max-w-screen-2xl lg:px-20 px-[24px] mx-auto">
    <!-- Heading -->
    <div class="mb-[48px] lg:mb-[80px]">
      <h2
        class="lg:text-[80px] text-[48px] lg:leading-[84px] leading-[50px] font-black text-center font-ppradio text-textPrimary mb-[16px]"
      >
        Blog
      </h2>
      <p
        class="font-figtree lg:text-[20px] text-[16px] text-center lg:leading-[24px] leading-[20px] text-textSecondary"
      >
        Read stories, tips, and ideas about jewellery and design
      </p>
    </div>

    <!-- Blogs -->
    <div class="flex flex-col">
      <!-- Category buttons -->

      <div
        id="buttonGroup"
        class="relative mb-[32px] hidden md:inline-flex items-center justify-center bg-cardColor rounded-2xl mx-auto h-12 p-1"
      >
        <!-- Slider behind buttons -->
        <div
          id="slider"
          class="absolute top-1 left-0 h-10 bg-white rounded-xl shadow-md transition-all duration-300 z-0"
        >
        </div>

        <button
          class="relative z-10 h-10 py-2 px-6 rounded-xl cursor-pointer font-figtree font-normal text-sm leading-[18px] text-textPrimary"
          data-category="all"
        >
          View all
        </button>

        {
          categories?.map((cat) => (
            <button
              class="relative z-10 h-10 py-2 px-6 rounded-xl cursor-pointer font-figtree font-normal text-sm leading-[18px] text-textSecondary capitalize"
              data-category={cat?.slug?.current || cat?.title}
            >
              {cat?.title}
            </button>
          ))
        }
      </div>

      <!-- Category dropdown (mobile) -->
      <div
        class="mb-[32px] flex md:hidden items-center w-full py-2 px-3 h-13 gap-1 bg-white border border-[#F2F3F7] acd-shadow rounded-[16px]"
      >
        <span
          class="font-figtree font-bold text-[18px] leading-[22px] text-textPrimary"
          >Category:</span
        >
        <select
          id="mobileCategory"
          name="category"
          class="w-full font-figtree font-normal text-sm leading-[18px] text-textSecondary outline-none capitalize"
        >
          <option value="all">All</option>
          {
            categories?.map(
              (cat) =>
                cat?.title && (
                  <option value={cat.slug?.current || cat.title}>
                    {cat.title}
                  </option>
                )
            )
          }
        </select>
      </div>

      <!-- Blogs grid -->
      <div
        id="postsContainer"
        class="mb-[48px] lg:mb-[80px] grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-5"
      >
        <!-- Featured blog (first post) -->
        {
          posts?.length > 0 &&
            posts.slice(0, 1).map((post) => (
              <div
                key={post?.slug?.current}
                class="lg:mb-[28px] md:col-span-2 lg:col-span-3 min-w-[240px] md:max-w-full rounded-[20px] border border-cardColor flex flex-col md:flex-row md:items-center md:bg-secondary md:border-secondary post-item"
                data-category={post?.categories
                  ?.map((c) => c.slug?.current || c.title)
                  .join(" ")}
              >
                <a
                  href={`/blog/${post?.slug?.current}`}
                  class="md:min-w-[400px] lg:min-w-[440px]"
                >
                  <img
                    src={urlForImage(post?.mainImage)}
                    alt={post?.mainImage?.alt || post?.title || "blog image"}
                    class="lg:rounded-[24px] rounded-[20px] mb-[8px] md:mb-0 md:w-[350px] lg:w-[440px] md:h-[280px] lg:h-[312px] object-cover"
                  />
                </a>
                <div class="p-[12px] md:py-[24px] md:pl-[48px] md:pr-[32px]">
                  {post?.categories && (
                    <span class="inline-block grid uppercase place-content-center h-[22px] py-1 px-3 rounded-[40px] bg-cardColor md:bg-[#E3E4E8] font-figtree font-normal text-[10px] leading-[14px] text-textPrimary">
                      {post?.categories.map((cat) => cat?.title).join(", ")}
                    </span>
                  )}
                  <a href={`/blog/${post?.slug?.current}`}>
                    <h3 class="line-clamp-2 mt-[12px] mb-[8px] font-ppradio font-bold text-textPrimary text-lg leading-[22px] lg:font-black lg:text-[32px] lg:leading-[36px]">
                      {post?.title}
                    </h3>
                  </a>
                  <p class="line-clamp-2 md:line-clamp-3 lg:line-clamp-4 lg:mb-[32px] mb-[16px] font-figtree font-normal text-textPrimary text-base leading-[20px] lg:text-[18px] lg:leading-[22px]">
                    {post?.description}
                  </p>
                  <div class="w-full flex items-center gap-2">
                    <span class="font-figtree font-normal text-sm leading-[18px] text-textSecondary">
                      {post?.publishedAt && formatDate(post?.publishedAt)}
                    </span>
                    <Image src={badge} alt="blog image" class="h-2 w-2" />
                    <span class="font-figtree font-normal text-sm leading-[18px] text-textSecondary">
                      {calculateReadTime(post?.body)}
                    </span>
                  </div>
                </div>
              </div>
            ))
        }
        <!-- Other blogs -->
        {
          posts?.slice(1).map(
            (item) =>
              item?.slug?.current && (
                <div
                  class="min-w-[240px] rounded-[20px] border border-cardColor flex flex-col post-item"
                  data-category={item?.categories
                    ?.map((c) => c.slug?.current || c.title)
                    .join(" ")}
                >
                  <a href={`/blog/${item?.slug?.current}`}>
                    <img
                      src={urlForImage(item?.mainImage)}
                      alt={item?.mainImage?.alt || item?.title || "blog image"}
                      class="lg:rounded-[24px] rounded-[20px] mb-[8px] min-h-[231px] md:min-h-[293px] md:max-h-[293px] w-full"
                    />
                  </a>
                  <div class="p-[12px] lg:py-4 lg:px-5">
                    {item?.categories && (
                      <span class="inline-block grid uppercase place-content-center h-[22px] py-1 px-3 rounded-[40px] bg-cardColor md:bg-[#E3E4E8] font-figtree font-normal text-[10px] leading-[14px] text-textPrimary">
                        {item?.categories?.map((cat) => cat?.title).join(", ")}
                      </span>
                    )}
                    <a href={`/blog/${item?.slug?.current}`}>
                      <h3 class="line-clamp-2 mt-[12px] mb-[8px] font-ppradio font-bold text-textPrimary text-lg leading-[22px] lg:font-black lg:text-[20px] lg:leading-[24px]">
                        {item?.title}
                      </h3>
                    </a>
                    <p class="line-clamp-2 lg:mb-[32px] mb-[16px] font-figtree font-normal text-textPrimary text-base leading-[20px] lg:text-[18px] lg:leading-[22px]">
                      {item?.description}
                    </p>
                    <div class="w-full flex items-center gap-2">
                      <span class="font-figtree font-normal text-sm leading-[18px] text-textSecondary">
                        {item?.publishedAt && formatDate(item?.publishedAt)}
                      </span>
                      <Image src={badge} alt="blog image" class="h-2 w-2" />
                      <span class="font-figtree font-normal text-sm leading-[18px] text-textSecondary">
                        {calculateReadTime(item?.body)}
                      </span>
                    </div>
                  </div>
                </div>
              )
          )
        }
      </div>

      <!-- View more button -->
      {
        posts?.length >= 10 && (
          <button class="font-figtree font-medium text-base leading-5 text-textPrimary bg-cardColor py-[14px] px-[24px] h-12 rounded-[16px] lg:w-fit lg:mx-auto cursor-pointer">
            View more
          </button>
        )
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const buttonGroup = document.getElementById("buttonGroup");
    const buttons = buttonGroup?.querySelectorAll("button") || [];
    const posts = document.querySelectorAll(".post-item");
    const slider = document.getElementById("slider");
    const mobileSelect = document.getElementById("mobileCategory");

    // Filter posts by category
    const filterPosts = (category) => {
      posts.forEach((post) => {
        const postCategories = post.dataset.category?.split(" ") || [];
        post.style.display =
          category === "all" || postCategories.includes(category)
            ? "flex"
            : "none";
      });
    };

    // Move slider under the active button
    const moveSlider = (button) => {
      if (!slider || !button) return;
      slider.style.width = `${button.offsetWidth}px`;
      slider.style.transform = `translateX(${button.offsetLeft}px)`;
    };

    // Update active button styling
    const setActiveButton = (activeBtn) => {
      buttons.forEach((btn) => {
        btn.classList.remove("text-textPrimary");
        btn.classList.add("text-textSecondary");
        btn.classList.remove("acd-shadow");
      });
      if (activeBtn) {
        activeBtn.classList.remove("text-textSecondary");
        activeBtn.classList.add("text-textPrimary");
        activeBtn.classList.add("acd-shadow");
      }
    };

    // Handle button click
    const handleButtonClick = (btn) => {
      const category = btn.dataset.category;
      filterPosts(category);
      moveSlider(btn);
      setActiveButton(btn);

      // Update mobile select if exists
      if (mobileSelect) mobileSelect.value = category;
    };

    // Event listeners for buttons
    buttons.forEach((btn) => {
      btn.addEventListener("click", () => handleButtonClick(btn));
    });

    // Event listener for mobile dropdown
    if (mobileSelect) {
      mobileSelect.addEventListener("change", () => {
        const selectedCategory = mobileSelect.value;
        filterPosts(selectedCategory);

        const matchingButton = Array.from(buttons).find(
          (btn) => btn.dataset.category === selectedCategory
        );
        moveSlider(matchingButton);
        setActiveButton(matchingButton);
      });
    }

    // Initialize
    if (buttons[0]) handleButtonClick(buttons[0]);
  });
</script>
